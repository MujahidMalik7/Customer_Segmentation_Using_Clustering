# -*- coding: utf-8 -*-
"""Customer_Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XfqtSuIcMgSBcbmNM0m89tv5WL8wdh0I

**Install Dependencies**
"""

!pip install -U pandas numpy scikit-learn matplotlib scipy

"""**Import Libraries**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA

from scipy.cluster.hierarchy import dendrogram, linkage

"""**Load Dataset**"""

from google.colab import files
uploaded = files.upload()   # Upload the Mall_Customers.csv file

df = pd.read_csv("Mall_Customers.csv")
df.head()

"""**Exploratory Data Analysis (EDA)**"""

print("Shape:", df.shape)
print("\nMissing Values:\n", df.isna().sum())
print("\nDescriptive Statistics:\n", df.describe())

# Quick distribution plots
df.hist(figsize=(10,8), bins=20)
plt.tight_layout()
plt.show()

"""**Feature Selection & Scaling**"""

features = ["Age", "Annual Income (k$)", "Spending Score (1-100)"]
X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""**Elbow Method & Silhouette Score (KMeans)**"""

inertias = []
sil_scores = []
K_RANGE = range(2, 11)

for k in K_RANGE:
    km = KMeans(n_clusters=k, n_init=10, random_state=42)
    labels = km.fit_predict(X_scaled)
    inertias.append(km.inertia_)
    sil_scores.append(silhouette_score(X_scaled, labels))

# Elbow Plot
plt.plot(K_RANGE, inertias, marker="o")
plt.xlabel("K")
plt.ylabel("Inertia (SSE)")
plt.title("Elbow Plot")
plt.show()

# Silhouette Plot
plt.plot(K_RANGE, sil_scores, marker="o")
plt.xlabel("K")
plt.ylabel("Silhouette Score")
plt.title("Silhouette vs K")
plt.show()

"""**Final KMeans Clustering**"""

best_k = 5
kmeans = KMeans(n_clusters=best_k, n_init=10, random_state=42)
df["KMeans_Cluster"] = kmeans.fit_predict(X_scaled)

df.groupby("KMeans_Cluster")[features].mean()

"""**Hierarchical Clustering & Dendrogram**"""

agglo = AgglomerativeClustering(n_clusters=best_k, linkage="ward")
df["HClust_Cluster"] = agglo.fit_predict(X_scaled)

# Dendrogram
Z = linkage(X_scaled, method="ward")
plt.figure(figsize=(10,4))
dendrogram(Z, truncate_mode="lastp", p=12, leaf_rotation=45, leaf_font_size=10, show_contracted=True)
plt.title("Hierarchical Clustering Dendrogram")
plt.show()

"""**PCA for Visualization**"""

pca = PCA(n_components=2, random_state=42)
pts2d = pca.fit_transform(X_scaled)
df["PC1"], df["PC2"] = pts2d[:,0], pts2d[:,1]

plt.figure(figsize=(6,5))
for c in sorted(df["KMeans_Cluster"].unique()):
    subset = df[df["KMeans_Cluster"] == c]
    plt.scatter(subset["PC1"], subset["PC2"], label=f"Cluster {c}", s=30)
plt.legend()
plt.title("KMeans Clusters (PCA 2D)")
plt.show()

"""**Business Insights**"""

median_income = df["Annual Income (k$)"].median()
median_spend = df["Spending Score (1-100)"].median()
median_age = df["Age"].median()

insights = []
for cid, grp in df.groupby("KMeans_Cluster"):
    size = len(grp)
    inc, spend, age = grp["Annual Income (k$)"].mean(), grp["Spending Score (1-100)"].mean(), grp["Age"].mean()

    tags = []
    tags.append("High Income" if inc >= median_income else "Low Income")
    tags.append("High Spend" if spend >= median_spend else "Low Spend")
    tags.append("Younger" if age <= median_age else "Older")

    insights.append({
        "Cluster": cid,
        "Size": size,
        "Mean_Age": round(age,2),
        "Mean_Income(k$)": round(inc,2),
        "Mean_SpendingScore": round(spend,2),
        "Tags": ", ".join(tags)
    })

pd.DataFrame(insights)